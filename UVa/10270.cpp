/*
 * Finalmente he optado por usar la pequeña "trampa" de precalcular todos los resultados
 * para N entre 2 y 50 y mandar a UVa el programa con los resultados insertados a mano.
 * El tiempo de precálculo ha sido de unos 15 minutos.
 * He intentado optimizar lo máximo que he podido, calculando sólo los N primos y añadiendo
 * alguna que otra mejora para evitar mucha ramificación.
 * El programa que he usado para el cálculo es el que está comentado.
 *
 * Accepted en UVa, 0.015 segundos, rank 92 a fecha de 15/05/2014
 */

#include <algorithm>
#include <cmath>
#include <fstream>
#include <iostream>
#include <vector>

using namespace std;

//#define MAX 20
//
//int N, NN;
//int divisores[51] = {0,0,0,0,2,0,2,0,2,3,2,0,2,0,2,3,2,0,2,0,2,3,2,0,2,5,2,3,2,0,2,0,2,3,2,5,2,0,2,3,2,0,2,0,2,3,2,0,2,7,2};
//int minimo[51];
//int X[51][MAX], Y[51][MAX], L[51][MAX];
//
//int cuadrados;
//int coordX[MAX], coordY[MAX], longitud[MAX];
//vector< vector<bool> > mapa;
//
///*
// * Devuelve true si hay sitio para poner un cuadrado de 'lado' en la posición (x,y)
// */
//bool hayHueco(int x, int y, int lado) {
//	if (x + lado > N || y + lado > N) return false;
//	int i, j;
//	for (i = y; i < y + lado; ++i)
//		for (j = x; j < x + lado; ++j)
//			if (mapa[i][j])
//				return false;
//	return true;
//}
//
//void ponerCuadrado(int x, int y, int lado) {
//	int i, j;
//	for (i = y; i < y + lado; ++i)
//		for (j = x; j < x + lado; ++j)
//			mapa[i][j] = true;
//	coordX[cuadrados] = x;
//	coordY[cuadrados] = y;
//	longitud[cuadrados] = lado;
//	cuadrados++;
//}
//
///*
// * Rellena los cuadrados delimitados por al menos 3 paredes o cuadrados ya colocados.
// */
//int rellenarObligado() {
//	int i = 0, j = 0, cuenta = 0, up, down, left, right, haypared, x, y;
//	for (i = 0; i < N && cuadrados < minimo[N]; ++i) {
//		for (j = 0; j < N && cuadrados < minimo[N]; ++j) {
//			if (!mapa[i][j] && (i == 0 || mapa[i-1][j]) && (j == 0 || mapa[i][j-1])) {
//				up = down = left = right = 0;
//				haypared = 9; /* Dónde hay pared */
//				x = j, y = i;
//				/* Pared de arriba */
//				while (x < N && !mapa[y][x] && (y == 0 || mapa[y-1][x]))
//					up++, x++;
//				/* Pared de la derecha */
//				x--;
//				if (x == N - 1 || mapa[y][x+1]) {
//					/* Hay pared */
//					haypared |= 2;
//					while (y < N && !mapa[y][x] && (x == N - 1 || mapa[y][x+1]))
//						right++, y++;
//				} else {
//					/* No hay pared */
//					while (y < N && !mapa[y][x])
//						right++, y++;
//				}
//				/* Pared de la izquierda */
//				x = j, y = i;
//				while (y < N && !mapa[y][x] && (x == 0 || mapa[y][x-1]))
//					left++, y++;
//				y--;
//				/* Pared de abajo */
//				if (y == N - 1 || mapa[y+1][x]) {
//					/* Hay pared */
//					haypared |= 4;
//					while (x < N && !mapa[y][x] && (y == N - 1 || mapa[y+1][x]))
//						down++, x++;
//				} else {
//					/* No hay pared */
//					while (x < N && !mapa[y][x])
//						down++, x++;
//				}
//				/* Condición para cuadrado forzoso: tres o cuatro paredes */
//				if (haypared == 11) {
//					if (min(left, right) >= up) {
//						ponerCuadrado(j, i, up);
//						cuenta++;
//					}
//				} else if (haypared == 13) {
//					if (min(up, down) >= left) {
//						ponerCuadrado(j, i, left);
//						cuenta++;
//					}
//				} else if (haypared == 15) {
//					ponerCuadrado(j, i, min(up, left));
//					cuenta++;
//				}
//			}
//		}
//	}
//
//	return cuenta;
//}
//
///*
// * Quita los últimos n cuadrados colocados
// */
//void quitarCuadrados(int n) {
//	int c, i, j;
//	for (c = 0; c < n; ++c) {
//		cuadrados--;
//		for (i = coordY[cuadrados]; i < coordY[cuadrados] + longitud[cuadrados]; ++i)
//			for (j = coordX[cuadrados]; j < coordX[cuadrados] + longitud[cuadrados]; ++j)
//				mapa[i][j] = false;
//	}
//}
//
///*
// * Poner un cuadrado interno que garantice que la casilla (x,y) quede cubierta.
// * Se intenta poner los cuadrados de más a grande a más pequeño.
// * Rellenar la siguiente esquina vacía en cada caso.
// */
//void rellenar(int x, int y, int depth) {
//	int lado, sigx, sigy, minlado = 0;
//	if (!depth && N > 2) minlado = N / 2;
//	for (lado = N - 1; lado > minlado; --lado) {
//		if (hayHueco(x, y, lado)) {
//			/* Poner el cuadrado */
//			ponerCuadrado(x, y, lado);
//			/* Rellenar cuadrados obligados */
//			int nuevos = rellenarObligado();
//			if (cuadrados < minimo[N]) {
//				/* Buscar la siguiente esquina a rellenar */
//				sigx = x, sigy = y;
//				while (sigy < N && mapa[sigy][sigx]) {
//					sigx++;
//					if (sigx == N) sigx = 0, sigy++;
//					if (sigy == N) {
//						/* Guardar mejor resultado encontrado */
//						if (cuadrados < minimo[N]) {
//							minimo[N] = cuadrados;
//							memcpy(X[N], coordX, cuadrados * sizeof(int));
//							memcpy(Y[N], coordY, cuadrados * sizeof(int));
//							memcpy(L[N], longitud, cuadrados * sizeof(int));
//						}
//					}
//				}
//				/* Llamar de forma recursiva si hay esperanza de mejorar */
//				if (sigy < N && depth < 6)
//					rellenar(sigx, sigy, depth + 1);
//			}
//			/* Quitar los cuadrados cuadrado */
//			quitarCuadrados(nuevos + 1);
//		}
//	}
//}
//
//int main() {
//	int i, a, divisor, ratio;
//	memset(minimo, 0, sizeof minimo);
//	for (N = 2; N <= 50; ++N) {
//		NN = N * N;
//		divisor = divisores[N];
//		if (divisor != 0) {
//			/* El mismo patrón que su divisor primo menor */
//			ratio = N / divisor;
//			minimo[N] = minimo[divisor];
//			for (i = 0; i < minimo[N]; ++i) {
//				X[N][i] = X[divisor][i] * ratio;
//				Y[N][i] = Y[divisor][i] * ratio;
//				L[N][i] = L[divisor][i] * ratio;
//			}
//		} else {
//			/* Backtracking */
//			cuadrados = 0;
//			minimo[N] = MAX;
//			mapa = vector< vector<bool> >(N, vector<bool>(N, false));
//			rellenar(0, 0, 0);
//		}
//	}
//	/* Imprimir código C con el resultado */
//	printf("int Min[51] = {");
//	for (a = 0; a < 50; ++a)
//		printf("%d,", minimo[a]);
//	printf("%d};\n", minimo[50]);
//
//	printf("int X[51][20] = {\n");
//	for (a = 0; a < 51; ++a) {
//		printf("\t{");
//		for (i = 0; i < minimo[a]; ++i)
//			printf("%d,", X[a][i] + 1);
//		for (i = minimo[a]; i < 19; ++i)
//			printf("0,");
//		printf("0}");
//		if (a < 50) printf(",\n");
//	}
//	printf("};\n");
//
//	printf("int Y[51][20] = {\n");
//	for (a = 0; a < 51; ++a) {
//		printf("\t{");
//		for (i = 0; i < minimo[a]; ++i)
//			printf("%d,", Y[a][i] + 1);
//		for (i = minimo[a]; i < 19; ++i)
//			printf("0,");
//		printf("0}");
//		if (a < 50) printf(",\n");
//	}
//	printf("};\n");
//
//	printf("int L[51][20] = {\n");
//	for (a = 0; a < 51; ++a) {
//		printf("\t{");
//		for (i = 0; i < minimo[a]; ++i)
//			printf("%d,", L[a][i]);
//		for (i = minimo[a]; i < 19; ++i)
//			printf("0,");
//		printf("0}");
//		if (a < 50) printf(",\n");
//	}
//	printf("};\n");
//
//	return 0;
//}


int Min[51] = {0,0,4,6,4,8,4,9,4,6,4,11,4,11,4,6,4,12,4,13,4,6,4,13,4,8,4,6,4,14,4,15,4,6,4,8,4,15,4,6,4,16,4,16,4,6,4,16,4,9,4};
int X[51][20] = {
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,3,3,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,3,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,4,1,4,3,3,4,5,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,4,1,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,5,1,5,7,4,7,4,6,0,0,0,0,0,0,0,0,0,0,0},
	{1,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,7,7,1,4,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,6,1,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,8,1,8,10,8,5,9,9,11,11,0,0,0,0,0,0,0,0,0},
	{1,7,1,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,8,1,8,7,10,7,7,10,9,11,0,0,0,0,0,0,0,0,0},
	{1,8,1,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,11,11,1,6,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,9,1,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,10,1,10,9,12,16,9,16,12,9,13,0,0,0,0,0,0,0,0},
	{1,10,1,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,14,14,1,7,14,13,16,13,13,16,15,17,0,0,0,0,0,0,0},
	{1,11,1,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,15,15,1,8,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,12,1,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,13,1,13,12,15,20,12,12,20,21,19,19,0,0,0,0,0,0,0},
	{1,13,1,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,16,1,16,11,11,16,21,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,14,1,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,19,19,1,10,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,15,1,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,17,1,17,20,25,14,20,14,24,21,24,21,25,0,0,0,0,0,0},
	{1,16,1,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,22,22,1,11,22,21,24,28,21,24,25,21,21,23,0,0,0,0,0},
	{1,17,1,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,23,23,1,12,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,18,1,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,22,1,22,15,15,22,29,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,19,1,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,21,1,21,23,31,21,22,18,18,31,30,33,30,30,0,0,0,0,0},
	{1,20,1,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,27,27,1,14,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,21,1,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,29,29,1,14,29,27,33,27,27,33,32,35,36,35,32,0,0,0,0},
	{1,22,1,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,29,1,29,38,38,40,38,39,29,16,33,39,39,31,31,0,0,0,0},
	{1,23,1,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,31,31,1,16,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,24,1,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,27,1,27,22,37,43,43,44,37,41,22,41,38,38,38,0,0,0,0},
	{1,25,1,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,29,1,29,43,22,43,22,36,0,0,0,0,0,0,0,0,0,0,0},
	{1,26,1,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};
int Y[51][20] = {
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,1,2,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,1,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,1,4,3,4,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,1,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,1,5,4,4,5,5,6,6,0,0,0,0,0,0,0,0,0,0,0},
	{1,1,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,1,4,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,1,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,1,8,5,5,7,8,7,10,10,11,0,0,0,0,0,0,0,0,0},
	{1,1,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,1,8,7,8,7,9,12,11,12,11,0,0,0,0,0,0,0,0,0},
	{1,1,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,1,6,11,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,1,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,1,10,9,10,9,9,11,11,13,14,13,0,0,0,0,0,0,0,0},
	{1,1,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,1,7,14,14,13,14,13,15,18,17,18,17,0,0,0,0,0,0,0},
	{1,1,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,1,8,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,1,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,1,13,12,13,12,12,14,17,16,16,17,19,0,0,0,0,0,0,0},
	{1,1,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,1,16,11,16,21,21,21,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,1,14,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,1,10,19,19,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,1,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,1,17,14,14,14,17,19,23,19,23,25,26,25,0,0,0,0,0,0},
	{1,1,16,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,1,11,22,22,21,22,21,21,23,25,25,26,30,30,0,0,0,0,0},
	{1,1,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,1,12,23,23,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,1,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,1,22,15,22,29,29,29,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,1,19,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,1,21,18,18,18,20,20,21,26,25,26,25,27,30,0,0,0,0,0},
	{1,1,20,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,1,14,27,27,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,1,21,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,1,14,29,29,27,29,27,31,37,36,37,36,36,37,38,0,0,0,0},
	{1,1,22,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,1,29,16,16,22,22,24,24,25,29,25,25,26,29,31,0,0,0,0},
	{1,1,23,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,1,16,31,31,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,1,24,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,1,27,22,27,22,22,27,27,28,28,32,31,32,35,38,0,0,0,0},
	{1,1,25,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,1,29,22,22,29,29,36,36,0,0,0,0,0,0,0,0,0,0,0},
	{1,1,26,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};
int L[51][20] = {
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{2,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{3,2,2,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{4,3,3,2,1,1,1,2,2,0,0,0,0,0,0,0,0,0,0,0},
	{4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{6,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{7,4,4,2,2,1,4,3,2,1,1,0,0,0,0,0,0,0,0,0},
	{6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{7,6,6,2,1,4,3,2,1,2,3,0,0,0,0,0,0,0,0,0},
	{7,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{10,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{9,8,8,2,1,4,2,3,2,1,4,5,0,0,0,0,0,0,0,0},
	{9,9,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{13,6,6,6,6,2,1,4,3,2,1,2,3,0,0,0,0,0,0,0},
	{10,10,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{14,7,7,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{11,11,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{12,11,11,2,1,5,4,3,7,1,3,2,5,0,0,0,0,0,0,0},
	{12,12,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{15,10,10,10,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0},
	{13,13,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{18,9,9,9,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{14,14,14,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{16,13,13,3,5,5,6,4,7,6,3,1,4,5,0,0,0,0,0,0},
	{15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{21,10,10,10,10,2,1,4,4,3,1,7,4,2,2,0,0,0,0,0},
	{16,16,16,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{22,11,11,11,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{17,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{21,14,14,14,7,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0},
	{18,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{20,17,17,2,8,7,1,1,5,12,2,1,5,3,8,0,0,0,0,0},
	{19,19,19,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{26,13,13,13,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{20,20,20,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{28,13,13,13,13,4,2,9,6,5,2,1,1,6,1,4,0,0,0,0},
	{21,21,21,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{28,15,15,9,6,2,4,1,1,4,15,6,1,5,2,13,0,0,0,0},
	{22,22,22,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{30,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{23,23,23,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{26,21,21,10,5,6,5,1,4,4,3,16,7,3,3,10,0,0,0,0},
	{24,24,24,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{28,21,21,14,7,7,7,14,14,0,0,0,0,0,0,0,0,0,0,0},
	{25,25,25,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};

int main() {
#ifdef TESTING
	ifstream cin("input.txt");
	ofstream cout("output.txt");
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
#endif
	int T, N, i;
	scanf("%d ", &T);
	while (T--) {
		scanf("%d ", &N);
		printf("%d\n", Min[N]);
		for (i = 0; i < Min[N]; ++i)
			printf("%d %d %d\n", X[N][i], Y[N][i], L[N][i]);
	}
	return 0;
}

